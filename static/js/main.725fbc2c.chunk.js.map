{"version":3,"sources":["components/SortButton/SortButton.module.css","store/app-reduser/app-selector.tsx","api/instance.ts","store/app-reduser/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","components/SortButton/SortButton.tsx","components/NewTaskDialog/NewTaskDialog.tsx","components/ChangeStatusDialog/ChangeStatusDialog.tsx","components/ChangeTextDialog/ChangeTextDialog.tsx","pages/Tasks/Tasks.tsx","components/LoginFormDialog/LoginFormDialog.tsx","app/App.tsx","store/store.ts","index.tsx","pages/Tasks/Tasks.module.css","app/App.module.css"],"names":["module","exports","selectorStatus","state","app","status","selectorError","error","selectorTotalTaskCount","totalTaskCount","selectorCurrentPage","getMeData","page","selectorToken","token","selectorTasks","createSelector","tasks","Tasks","map","task","taskTextStatus","instance","axios","create","baseURL","headers","Name","AuthAPI","username","password","formData","FormData","append","post","then","res","data","API","params","get","newTask","userName","text","email","id","initialState","sort_field","sort_direction","setAppStatus","type","setAppError","setSortData","setErrorResponse","getMe","dispatch","getState","a","message","Number","total_task_count","Error","addTask","JSON","stringify","login","updateTask","Alert","props","elevation","variant","ErrorSnackbar","React","memo","useDispatch","handleClose","event","reason","useSelector","Snackbar","open","autoHideDuration","onClose","severity","SortCardButton","name","sortUp","useCallback","sortDown","className","s","tableSortIcons","color","onClick","initialValues","validationSchema","yup","required","NewTaskDialog","NewTaskDialogClose","formik","useFormik","onSubmit","values","resetForm","Dialog","aria-labelledby","DialogTitle","DialogContent","handleSubmit","TextField","value","placeholder","onChange","handleChange","touched","Boolean","errors","helperText","Button","ChangeStatusDialog","changeStatusDialogClose","Submit","newStatus","ChangeTextDialog","changeTextDialogClose","currentPage","paginationCount","Math","ceil","useState","isFormDialog","setIsFormDialog","isUpdateDialog","setIsUpdateDialog","isFormStatus","setIsFormStatus","updateTaskId","setUpdateTaskId","updateTaskText","setUpdateTaskText","updateTaskStatus","setUpdateTaskStatus","useEffect","CurrentPageChange","setCurrentPage","newTaskDialogCall","isUpdate","changeTextDialogCall","changeStatusDialogCall","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","TableBody","align","iconText","statusIcon","Pagination","count","LoginFormDialog","App","loginHandler","AppBar","position","Toolbar","LinearProgress","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.725fbc2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableSortIcons\":\"SortButton_tableSortIcons__32JOc\"};","import { AppRootStateType } from '../store';\nimport { RequestStatusType, taskStatusType, taskType } from './app-reducer';\nimport { createSelector } from 'reselect';\n\nexport const selectorStatus = (state: AppRootStateType): RequestStatusType => state.app.status;\nexport const selectorError = (state: AppRootStateType): string | null => state.app.error;\nexport const Tasks = (state: AppRootStateType): Array<taskType> => state.app.tasks;\nexport const selectorTotalTaskCount = (state: AppRootStateType): number => state.app.totalTaskCount;\nexport const selectorCurrentPage = (state: AppRootStateType): number => state.app.getMeData.page;\nexport const selectorToken = (state: AppRootStateType): string => state.app.token;\n\nexport const selectorTasks = createSelector([Tasks], (Tasks): Array<taskType> => {\n    return Tasks.map(task => {\n        return { ...task, status: taskTextStatus(task.status) };\n    });\n});\n\n\nconst taskTextStatus = (status: taskStatusType) => {\n    switch (status) {\n        case 0: {\n            return 'задача не выполнена';\n        }\n        case 1: {\n            return 'задача не выполнена, отредактирована админом';\n        }\n        case 10: {\n            return 'задача выполнена';\n        }\n        case 11: {\n            return 'задача отредактирована админом и выполнена';\n        }\n        default:\n            return 'отсутствуют сведения о задаче';\n    }\n\n};\n","import axios from 'axios';\nimport { getMeDataType, taskType } from '../store/app-reduser/app-reducer';\n\nexport const baseURL = 'https://uxcandy.com/~shapoval/test-task-backend/v2/';\n\nexport const instance = axios.create({ baseURL, headers: { 'Content-Type': 'multipart/form-data' } });\n\nexport const Name = 'EvgenyPotapov';\n\nexport const AuthAPI = {\n    login(username: string, password: string) {\n        let formData = new FormData();\n        formData.append('username', username);\n        formData.append('password', password);\n        return instance.post<loginDataType>(`/login?developer=JON.`, formData).then(res=>res.data);\n    },\n};\n\nexport const API = {\n    getTask(params: getMeDataType) {\n        return instance.get<getTaskDataType | string>(`?developer=${Name}.`, {\n            params: params,\n        }).then(res=>res.data);\n\n    },\n    addTask(newTask: newTaskType) {\n        let formData = new FormData();\n        formData.append('username', newTask.userName);\n        formData.append('text', newTask.text);\n        formData.append('email', newTask.email);\n        return instance.post<addTaskDataType>(`create?developer=${Name}.`, formData).then(res=>res.data);\n    },\n    updateTask(token: string, id: number, text: string, status: string) {\n        let formData = new FormData();\n        formData.append('token', token);\n        formData.append('text', text);\n        formData.append('status', status);\n        return instance.post<addTaskDataType>(`edit/${id}?developer=${Name}.`, formData).then(res=>res.data);\n    },\n};\n\nexport type getSuccessTaskDataType = {\n    status: 'ok'\n    message: messageType\n    total_task_count: string\n}\nexport type getErrorTaskDataType = {\n    status: 'error'\n    message: string\n}\nexport type messageType = {\n    total_task_count: string,\n    tasks: Array<taskType>\n}\nexport type newTaskType = {\n    userName: string,\n    email: string,\n    text: string\n}\nexport type addSuccessTaskDataType = {\n    status: 'ok',\n    message: taskType,\n}\nexport type addErrorTaskDataType = {\n    status: 'error',\n    message: {\n        username: string,\n        email: string,\n        text: string\n    }\n}\nexport type addTaskDataType = addSuccessTaskDataType | addErrorTaskDataType\n\nexport type loginSuccessDataType = {\n    status: 'ok',\n    message: { token: string },\n}\nexport type loginErrorDataType = {\n    status: 'error',\n    message: {\n        username: string,\n        password: string,\n    }\n}\nexport type loginDataType = loginSuccessDataType | loginErrorDataType\n\nexport type getTaskDataType = getSuccessTaskDataType | getErrorTaskDataType\n\n","import { Dispatch } from 'redux';\nimport { addTaskDataType, API, AuthAPI, getTaskDataType, loginDataType, newTaskType } from '../../api/instance';\nimport { AppRootStateType } from '../store';\n\nconst initialState = {\n    status: 'succeeded' as RequestStatusType,\n    error: null as string | null,\n    tasks: [] as Array<taskType>,\n    totalTaskCount: 0,\n    getMeData: {\n        page: 1,\n        sort_field: '' as sortFieldType,\n        sort_direction: '' as 'asc' | 'desc',\n    },\n    token: '',\n};\n\nexport const appReducer = (state: AppInitialStateType = initialState, action: ActionsType): AppInitialStateType => {\n    switch (action.type) {\n        case 'APP/SET_STATUS':\n            return { ...state, status: action.status };\n        case 'APP/SET_ERROR':\n            return { ...state, error: action.error };\n        case 'APP/SET_TASKS':\n            return { ...state, tasks: action.tasks };\n        case 'APP/SET_TOTAL_CARDS_COUNT':\n            return { ...state, totalTaskCount: action.totalTaskCount };\n        case 'APP/SET_CURRENT_PAGE':\n            return { ...state, getMeData: { ...state.getMeData, page: action.currentPage } };\n        case 'APP/SET_SORT_DATA':\n            return { ...state, getMeData: { ...state.getMeData, ...action.data } };\n        case 'APP/SET_TOKEN':\n            return { ...state, token: action.token };\n        case 'APP/SET_ERROR_RESPONSE':\n            return { ...state, status: action.status, error: action.error };\n        default:\n            return state;\n    }\n};\n\nexport const setAppStatus = (status: RequestStatusType) =>\n    ({ type: 'APP/SET_STATUS', status } as const);\nexport const setAppError = (error: string | null) =>\n    ({ type: 'APP/SET_ERROR', error } as const);\nexport const setTasks = (tasks: Array<taskType>) =>\n    ({ type: 'APP/SET_TASKS', tasks } as const);\nexport const setTotalCardsCount = (totalTaskCount: number) =>\n    ({ type: 'APP/SET_TOTAL_CARDS_COUNT', totalTaskCount } as const);\nexport const setCurrentPage = (currentPage: number) =>\n    ({ type: 'APP/SET_CURRENT_PAGE', currentPage } as const);\nexport const setSortData = (data: { sort_field: sortFieldType, sort_direction: 'asc' | 'desc' }) =>\n    ({ type: 'APP/SET_SORT_DATA', data } as const);\nexport const setToken = (token: string) =>\n    ({ type: 'APP/SET_TOKEN', token } as const);\nexport const setErrorResponse = (error: string, status: RequestStatusType) =>\n    ({ type: 'APP/SET_ERROR_RESPONSE', error, status } as const);\n\nexport const getMe = () => async (dispatch: Dispatch, getState: () => AppRootStateType) => {\n    try {\n        dispatch(setAppStatus('loading'));\n        const params = getState().app.getMeData;\n        const res = <getTaskDataType>await API.getTask(params);\n        if (res.status === 'ok') {\n            dispatch(setTasks(res.message.tasks));\n            dispatch(setTotalCardsCount(Number(res.message.total_task_count)));\n        } else {\n            dispatch(setAppError(res.message));\n        }\n        dispatch(setAppStatus('succeeded'));\n    } catch (e) {\n        dispatch(setErrorResponse('Error from getMe response', 'succeeded'));\n        throw new Error('Error from getMe response');\n    }\n};\nexport const addTask = (newTask: newTaskType) => async (dispatch: Dispatch) => {\n    try {\n        dispatch(setAppStatus('loading'));\n        const res = <addTaskDataType>await API.addTask(newTask);\n        if (res.status === 'error') {\n            dispatch(setAppError(JSON.stringify(res.message)));\n        }\n        dispatch(setAppStatus('succeeded'));\n    } catch (e) {\n        dispatch(setErrorResponse('Error from addTask response', 'succeeded'));\n        throw new Error('Error from addTask response');\n    }\n};\nexport const login = (username: string, password: string) => async (dispatch: Dispatch) => {\n    try {\n        const res = <loginDataType>await AuthAPI.login(username, password);\n        if (res.status === 'ok') {\n            dispatch(setToken(res.message.token));\n        } else {\n            dispatch(setAppError(JSON.stringify(res.message)));\n        }\n        dispatch(setAppStatus('succeeded'));\n    } catch (e) {\n        dispatch(setErrorResponse('Error from login response', 'succeeded'));\n        throw new Error('Error from login response');\n    }\n};\nexport const updateTask = (id: number, text: string, status: string) => async (dispatch: Dispatch, getState: () => AppRootStateType) => {\n    try {\n        dispatch(setAppStatus('loading'));\n        const token = getState().app.token;\n        const res = <addTaskDataType>await API.updateTask(token, id, text, status);\n        if (res.status === 'error') {\n            dispatch(setAppError(JSON.stringify(res.message)));\n        }\n        dispatch(setAppStatus('succeeded'));\n    } catch (e) {\n        dispatch(setErrorResponse('Error from updateTask response', 'succeeded'));\n        throw new Error('Error from updateTask response');\n    }\n};\n\nexport type RequestStatusType = 'succeeded' | 'loading'\n\nexport type AppInitialStateType = typeof initialState\n\ntype ActionsType =\n    ReturnType<typeof setAppStatus> |\n    ReturnType<typeof setAppError> |\n    ReturnType<typeof setTasks> |\n    ReturnType<typeof setTotalCardsCount> |\n    ReturnType<typeof setCurrentPage> |\n    ReturnType<typeof setSortData> |\n    ReturnType<typeof setToken> |\n    ReturnType<typeof setErrorResponse>\n\nexport type getMeDataType = {\n    page: number\n    sort_field: sortFieldType,\n    sort_direction: 'asc' | 'desc'\n}\nexport type taskType = {\n    id: number,\n    username: string,\n    email: string,\n    text: string,\n    status: taskStatusType\n}\nexport type taskStatusType = 0 | 1 | 10 | 11 |\n    'задача не выполнена' |\n    'задача не выполнена, отредактирована админом' |\n    'задача выполнена' |\n    'задача отредактирована админом и выполнена' |\n    'отсутствуют сведения о задаче'\n\nexport type sortFieldType = 'id' | 'username' | 'email' | 'status'\n\n\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType } from '../../store/store';\nimport { setAppError } from '../../store/app-reduser/app-reducer';\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport const ErrorSnackbar = React.memo(() => {\n\n    const dispatch = useDispatch();\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppError(null));\n    };\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n\n    return (\n        <Snackbar open={true} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n})\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport { getMe, setSortData, sortFieldType } from '../../store/app-reduser/app-reducer';\nimport s from './SortButton.module.css';\n\ntype SortCardButtonPropsType = {\n    name: sortFieldType\n}\n\nexport const SortCardButton = React.memo(({ name }: SortCardButtonPropsType) => {\n    const dispatch = useDispatch();\n\n    const sortUp = useCallback(() => {\n        dispatch(setSortData({ sort_field: name, sort_direction: 'asc' }));\n        dispatch(getMe());\n    }, []);\n    const sortDown = useCallback(() => {\n        dispatch(setSortData({ sort_field: name, sort_direction: 'desc' }));\n        dispatch(getMe());\n    }, []);\n\n    return (\n        <div className={s.tableSortIcons}>\n            <ArrowUpwardIcon color={'primary'} onClick={sortDown}/>\n            <ArrowDownwardIcon color={'primary'} onClick={sortUp}/>\n        </div>\n    );\n});\n","import React, { useCallback } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { addTask } from '../../store/app-reduser/app-reducer';\nimport { useDispatch } from 'react-redux';\n\n\nconst initialValues = {\n    userName: '',\n    email: '',\n    text: '',\n};\n\nconst validationSchema = yup.object({\n    userName: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n    email: yup.string().email('Invalid email').required('это поле обязательно для заполнения'),\n    text: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n});\ntype FormDialogType = {\n    NewTaskDialogClose: (isUpdate: boolean) => void\n}\n\n\nexport const NewTaskDialog = React.memo(({ NewTaskDialogClose }: FormDialogType) => {\n\n    const dispatch = useDispatch();\n\n    const handleClose = useCallback(() => {\n        NewTaskDialogClose(false);\n    }, []);\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: async values => {\n            await dispatch(addTask(values));\n            NewTaskDialogClose(true);\n            formik.resetForm();\n\n        },\n    });\n\n    return (\n        <div>\n            <Dialog open={true} onClose={handleClose} aria-labelledby='form-dialog-title'>\n                <DialogTitle id='form-dialog-title'>CREATE TASK</DialogTitle>\n                <DialogContent>\n                    <form onSubmit={formik.handleSubmit}>\n                        <div><TextField\n                            name={'userName'}\n                            value={formik.values.userName}\n                            placeholder={'userName'}\n                            onChange={formik.handleChange}\n                            error={formik.touched.userName && Boolean(formik.errors.userName)}\n                            helperText={formik.touched.userName && formik.errors.userName}\n                        /></div>\n                        <div><TextField\n                            name={'email'}\n                            value={formik.values.email}\n                            placeholder={'email'}\n                            onChange={formik.handleChange}\n                            error={formik.touched.email && Boolean(formik.errors.email)}\n                            helperText={formik.touched.email && formik.errors.email}\n                        /></div>\n                        <div><TextField\n                            name={'text'}\n                            value={formik.values.text}\n                            placeholder={'text'}\n                            onChange={formik.handleChange}\n                            error={formik.touched.text && Boolean(formik.errors.text)}\n                            helperText={formik.touched.text && formik.errors.text}\n                        /></div>\n                        <Button variant='outlined' onClick={handleClose}>Cancel</Button>\n                        <Button variant='outlined' type='submit'>CREATE</Button>\n                    </form>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n});\n","import React, { useCallback } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { useDispatch } from 'react-redux';\nimport { taskStatusType, updateTask } from '../../store/app-reduser/app-reducer';\n\ntype FormDialogType = {\n    changeStatusDialogClose: (isUpdate: boolean) => void,\n    text: string\n    id: number\n    status: taskStatusType\n}\n\nexport const ChangeStatusDialog = React.memo(({ changeStatusDialogClose, text, status, id }: FormDialogType) => {\n\n    const dispatch = useDispatch();\n\n    const handleClose = useCallback(() => {\n        changeStatusDialogClose(false);\n    }, []);\n\n    const Submit = async () => {\n        const newStatus = (status === 'задача не выполнена') ? '10' : '11';\n        await dispatch(updateTask(id, text, newStatus));\n        changeStatusDialogClose(true);\n    };\n\n    return (\n        <div>\n            <Dialog open={true} onClose={handleClose} aria-labelledby='form-dialog-title'>\n                <DialogTitle id='form-dialog-title'>Change status</DialogTitle>\n                <DialogContent>\n                    <Button variant='outlined' onClick={handleClose}>Cancel</Button>\n                    <Button variant='outlined' onClick={Submit}>Change</Button>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n});\n","import React, { useCallback } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { updateTask } from '../../store/app-reduser/app-reducer';\n\n\nconst validationSchema = yup.object({\n    text: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n});\n\ntype FormDialogType = {\n    changeTextDialogClose: (isUpdate: boolean) => void,\n    text: string\n    id: number\n}\n\nexport const ChangeTextDialog = React.memo(({ changeTextDialogClose, text, id }: FormDialogType) => {\n\n    const dispatch = useDispatch();\n\n    const handleClose = useCallback(() => {\n        changeTextDialogClose(false);\n    }, []);\n\n    const formik = useFormik({\n        initialValues: { text: text },\n        validationSchema: validationSchema,\n        onSubmit: async values => {\n            await dispatch(updateTask(id, values.text, '1'));\n            changeTextDialogClose(true);\n            formik.resetForm();\n        },\n    });\n\n    return (\n        <div>\n            <Dialog open={true} onClose={handleClose} aria-labelledby='form-dialog-title'>\n                <DialogTitle id='form-dialog-title'>CHANGE TEXT</DialogTitle>\n                <DialogContent>\n                    <form onSubmit={formik.handleSubmit}>\n                        <div><TextField\n                            name={'text'}\n                            value={formik.values.text}\n                            placeholder={'password'}\n                            onChange={formik.handleChange}\n                            error={formik.touched.text && Boolean(formik.errors.text)}\n                            helperText={formik.touched.text && formik.errors.text}\n                        /></div>\n                        <Button variant='outlined' onClick={handleClose}>Cancel</Button>\n                        <Button variant='outlined' type='submit'>Change</Button>\n                    </form>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n});\n","import React, { useCallback, useEffect } from 'react';\nimport { getMe, setCurrentPage, taskStatusType } from '../../store/app-reduser/app-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    selectorCurrentPage,\n    selectorTasks,\n    selectorToken,\n    selectorTotalTaskCount,\n} from '../../store/app-reduser/app-selector';\nimport { Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { Pagination } from '@material-ui/lab';\nimport { SortCardButton } from '../../components/SortButton/SortButton';\nimport './Tasks.module.css';\nimport s from './Tasks.module.css';\nimport EditTwoToneIcon from '@material-ui/icons/EditTwoTone';\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\nimport { NewTaskDialog } from '../../components/NewTaskDialog/NewTaskDialog';\nimport { ChangeStatusDialog } from '../../components/ChangeStatusDialog/ChangeStatusDialog';\nimport { ChangeTextDialog } from '../../components/ChangeTextDialog/ChangeTextDialog';\n\nexport const Tasks = React.memo(() => {\n\n    const dispatch = useDispatch();\n\n    const tasks = useSelector(selectorTasks);\n    const totalTaskCount = useSelector(selectorTotalTaskCount);\n    const currentPage = useSelector(selectorCurrentPage);\n    const token = useSelector(selectorToken);\n    const paginationCount = Math.ceil(totalTaskCount / 3);\n    const [isFormDialog, setIsFormDialog] = React.useState(false);\n    const [isUpdateDialog, setIsUpdateDialog] = React.useState(false);\n    const [isFormStatus, setIsFormStatus] = React.useState(false);\n    const [updateTaskId, setUpdateTaskId] = React.useState(0);\n    const [updateTaskText, setUpdateTaskText] = React.useState('');\n    const [updateTaskStatus, setUpdateTaskStatus] = React.useState<taskStatusType>(0);\n\n    useEffect(() => {\n        dispatch(getMe());\n    }, [dispatch]);\n\n    const CurrentPageChange = useCallback((event: React.ChangeEvent<unknown>, value: number) => {\n        dispatch(setCurrentPage(value));\n        dispatch(getMe());\n    }, []);\n\n    const newTaskDialogCall = useCallback(() => {\n        setIsFormDialog(true);\n    }, []);\n    const NewTaskDialogClose = useCallback((isUpdate: boolean) => {\n        setIsFormDialog(false);\n        if (isUpdate === true) dispatch(getMe());\n    }, []);\n\n    const changeTextDialogCall = useCallback((id: number, text: string) => {\n        setIsUpdateDialog(true);\n        setUpdateTaskId(id);\n        setUpdateTaskText(text);\n    }, []);\n    const changeTextDialogClose = useCallback((isUpdate: boolean) => {\n        setIsUpdateDialog(false);\n        if (isUpdate === true) dispatch(getMe());\n    }, []);\n\n    const changeStatusDialogCall = useCallback((id: number, text: string, status: taskStatusType) => {\n        setIsFormStatus(true);\n        setUpdateTaskId(id);\n        setUpdateTaskText(text);\n        setUpdateTaskStatus(status);\n    }, []);\n    const changeStatusDialogClose = useCallback((isUpdate: boolean) => {\n        setIsFormStatus(false);\n        if (isUpdate === true) dispatch(getMe());\n    }, []);\n\n    return (<>\n            <TableContainer>\n                <Table aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell><h2>ID<SortCardButton name={'id'}/></h2></TableCell>\n                            <TableCell><h2>username<SortCardButton name={'username'}/></h2></TableCell>\n                            <TableCell><h2>email<SortCardButton name={'email'}/></h2></TableCell>\n                            <TableCell className={s.text}><h2>text</h2></TableCell>\n                            <TableCell><h2>status<SortCardButton name={'status'}/></h2></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {tasks.map((task) => (\n                            <TableRow key={task.id}>\n                                <TableCell align='center'>\n                                    {task.id}\n                                </TableCell>\n                                <TableCell align='center'>\n                                    {task.username}\n                                </TableCell>\n                                <TableCell align='center'>\n                                    {task.email}\n                                </TableCell>\n                                <TableCell align=\"center\">\n                                    {token && <EditTwoToneIcon color=\"secondary\" className={s.iconText}\n                                                               onClick={() => changeTextDialogCall(task.id, task.text)}/>}\n                                    {task.text}\n                                </TableCell>\n                                <TableCell align=\"center\" className={s.status}>\n                                    {task.status}{token && ((task.status === 'задача не выполнена') || (task.status === 'задача не выполнена, отредактирована админом')) &&\n                                <DoneOutlineIcon className={s.statusIcon} color='secondary'\n                                                 onClick={() => changeStatusDialogCall(task.id, task.text, task.status)}/>}\n                                </TableCell>\n\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n                <Pagination count={paginationCount} page={currentPage} onChange={CurrentPageChange} color='primary'/>\n                <Button variant={'outlined'} onClick={newTaskDialogCall}>ADD NEW TASK</Button>\n            </TableContainer>\n\n            {isFormDialog &&\n            <NewTaskDialog NewTaskDialogClose={NewTaskDialogClose}/>}\n\n            {isUpdateDialog &&\n            <ChangeTextDialog changeTextDialogClose={changeTextDialogClose}\n                              text={updateTaskText} id={updateTaskId}/>}\n            {isFormStatus &&\n            <ChangeStatusDialog changeStatusDialogClose={changeStatusDialogClose}\n                                text={updateTaskText} id={updateTaskId} status={updateTaskStatus}/>}\n        </>\n    );\n});\n","import React, { useCallback } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { login } from '../../store/app-reduser/app-reducer';\n\n\nconst initialValues = {\n    userName: 'admin',\n    password: '123',\n};\n\nconst validationSchema = yup.object({\n    userName: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n    password: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n});\n\ntype FormDialogType = {\n    setIsFormDialog: (isFormDialog: boolean) => void\n}\n\nexport const LoginFormDialog = React.memo(({ setIsFormDialog }: FormDialogType) => {\n\n    const dispatch = useDispatch();\n\n    const handleClose = useCallback(() => {\n        setIsFormDialog(false);\n    }, []);\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: async values => {\n            await dispatch(login(values.userName, values.password));\n            setIsFormDialog(false);\n            formik.resetForm();\n        },\n    });\n\n    return (\n        <div>\n            <Dialog open={true} onClose={handleClose} aria-labelledby='form-dialog-title'>\n                <DialogTitle id='form-dialog-title'>login</DialogTitle>\n                <DialogContent>\n                    <form onSubmit={formik.handleSubmit}>\n                        <div><TextField\n                            name={'userName'}\n                            value={formik.values.userName}\n                            placeholder={'userName'}\n                            onChange={formik.handleChange}\n                            error={formik.touched.userName && Boolean(formik.errors.userName)}\n                            helperText={formik.touched.userName && formik.errors.userName}\n                        /></div>\n                        <div><TextField\n                            name={'password'}\n                            value={formik.values.password}\n                            placeholder={'password'}\n                            onChange={formik.handleChange}\n                            error={formik.touched.password && Boolean(formik.errors.password)}\n                            helperText={formik.touched.password && formik.errors.password}\n                        /></div>\n                        <Button variant='outlined' onClick={handleClose}>Cancel</Button>\n                        <Button variant='outlined' type='submit'>Login</Button>\n                    </form>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n});\n","import React, { useCallback } from 'react';\nimport './App.module.css';\nimport s from './App.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectorError, selectorStatus, selectorToken } from '../store/app-reduser/app-selector';\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\nimport { AppBar, Button, LinearProgress, Toolbar } from '@material-ui/core';\nimport { Tasks } from '../pages/Tasks/Tasks';\nimport { LoginFormDialog } from '../components/LoginFormDialog/LoginFormDialog';\n\n\nfunction App() {\n\n    const token = useSelector(selectorToken);\n    const status = useSelector(selectorStatus);\n    const error = useSelector(selectorError);\n    const [isFormDialog, setIsFormDialog] = React.useState<boolean>(false);\n\n    const loginHandler = useCallback(() => {\n        setIsFormDialog(true);\n    }, []);\n\n    return (\n        <div className={s.App}>\n            {error !== null && <div><ErrorSnackbar/></div>}\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Button color={'secondary'} variant=\"contained\" onClick={loginHandler}> login </Button>\n                    {token ? <h2>Вы залогинены</h2> : <h2>Необходимо войти в приложение</h2>}\n                </Toolbar>\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\n            </AppBar>\n            <Tasks/>\n            {isFormDialog && <LoginFormDialog setIsFormDialog={setIsFormDialog}/>}\n        </div>\n    );\n}\n\nexport default App;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { appReducer } from './app-reduser/app-reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nconst rootReducer = combineReducers({\n    app: appReducer,\n});\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Tasks_text__3bYrS\",\"status\":\"Tasks_status__1jVHz\",\"iconText\":\"Tasks_iconText__3K-to\",\"statusIcon\":\"Tasks_statusIcon__386vt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3zaJT\",\"ErrorSnackbar\":\"App_ErrorSnackbar__UYFWw\"};"],"sourceRoot":""}